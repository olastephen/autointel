#!/usr/bin/env python3
"""
Query Analysis Results Script

This script queries the database to display the analysis results
that were generated by the analysis pipeline.

Usage:
    python scripts/query_analysis_results.py
"""

import os
import sys
import pandas as pd
import json

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def main():
    """Main function to query and display analysis results"""
    print("üîç QUERYING ANALYSIS RESULTS")
    print("=" * 60)
    
    try:
        # Import database config
        from src.config.config import DatabaseConfig
        
        # Initialize database connection
        db_config = DatabaseConfig()
        if not db_config.setup_from_env():
            print("‚ùå Failed to setup database connection")
            return False
        
        # Get table names from environment
        news_table = os.getenv('NEWS_TABLE', 'car_news')
        reviews_table = os.getenv('REVIEWS_TABLE', 'car_reviews')
        
        print(f"üìä Querying table: {news_table}")
        print("-" * 40)
        
        # Load news data with analysis results
        news_df = db_config.load_table(news_table)
        
        if news_df is not None and not news_df.empty:
            print(f"‚úì News data loaded: {news_df.shape}")
            print(f"Columns: {list(news_df.columns)}")
            
            # Display sentiment analysis results
            if 'sentiment' in news_df.columns:
                print(f"\nüìà News Sentiment Distribution:")
                sentiment_dist = news_df['sentiment'].value_counts()
                for sentiment, count in sentiment_dist.items():
                    percentage = (count / len(news_df)) * 100
                    print(f"  - {sentiment.capitalize()}: {count} ({percentage:.1f}%)")
            
            # Display sample topics
            if 'topics' in news_df.columns:
                print(f"\nüìù Sample Topics (first 3 articles):")
                for i, topics_json in enumerate(news_df['topics'].dropna().head(3)):
                    try:
                        topics = json.loads(topics_json)
                        print(f"  Article {i+1}: {topics[:3]}")  # Show first 3 topics
                    except:
                        print(f"  Article {i+1}: Topics data available")
            
            # Display sample entities
            if 'entities' in news_df.columns:
                print(f"\nüè∑Ô∏è Sample Entities (first 3 articles):")
                for i, entities_json in enumerate(news_df['entities'].dropna().head(3)):
                    try:
                        entities = json.loads(entities_json)
                        print(f"  Article {i+1}: {entities[:5]}")  # Show first 5 entities
                    except:
                        print(f"  Article {i+1}: Entities data available")
            
            # Display sample keywords
            if 'keywords' in news_df.columns:
                print(f"\nüîë Sample Keywords (first 3 articles):")
                for i, keywords_json in enumerate(news_df['keywords'].dropna().head(3)):
                    try:
                        keywords = json.loads(keywords_json)
                        print(f"  Article {i+1}: {keywords[:10]}")  # Show first 10 keywords
                    except:
                        print(f"  Article {i+1}: Keywords data available")
        
        print(f"\nüìä Querying table: {reviews_table}")
        print("-" * 40)
        
        # Load reviews data with analysis results
        reviews_df = db_config.load_table(reviews_table)
        
        if reviews_df is not None and not reviews_df.empty:
            print(f"‚úì Reviews data loaded: {reviews_df.shape}")
            print(f"Columns: {list(reviews_df.columns)}")
            
            # Display sentiment analysis results
            if 'sentiment' in reviews_df.columns:
                print(f"\nüìà Reviews Sentiment Distribution:")
                sentiment_dist = reviews_df['sentiment'].value_counts()
                for sentiment, count in sentiment_dist.items():
                    percentage = (count / len(reviews_df)) * 100
                    print(f"  - {sentiment.capitalize()}: {count} ({percentage:.1f}%)")
            
            # Display rating statistics
            if 'rating' in reviews_df.columns:
                print(f"\n‚≠ê Rating Statistics:")
                print(f"  - Average Rating: {reviews_df['rating'].mean():.2f}")
                print(f"  - Rating Range: {reviews_df['rating'].min():.1f} - {reviews_df['rating'].max():.1f}")
                print(f"  - Rating Distribution:")
                rating_dist = reviews_df['rating'].value_counts().sort_index()
                for rating, count in rating_dist.items():
                    percentage = (count / len(reviews_df)) * 100
                    print(f"    {rating} stars: {count} ({percentage:.1f}%)")
            
            # Display correlation analysis
            if 'correlation_score' in reviews_df.columns:
                print(f"\nüìà Correlation Analysis:")
                corr_score = reviews_df['correlation_score'].iloc[0]  # Same for all rows
                if corr_score is not None and not pd.isna(corr_score):
                    print(f"  - Rating-Sentiment Correlation: {corr_score:.3f}")
                else:
                    print(f"  - Rating-Sentiment Correlation: Not available")
            
            # Display review length statistics
            if 'review_length' in reviews_df.columns:
                print(f"\nüìè Review Length Statistics:")
                print(f"  - Average Length: {reviews_df['review_length'].mean():.0f} characters")
                print(f"  - Length Range: {reviews_df['review_length'].min():.0f} - {reviews_df['review_length'].max():.0f} characters")
            
            # Display sample topics
            if 'topics' in reviews_df.columns:
                print(f"\nüìù Sample Review Topics (first 3 reviews):")
                for i, topics_json in enumerate(reviews_df['topics'].dropna().head(3)):
                    try:
                        topics = json.loads(topics_json)
                        print(f"  Review {i+1}: {topics[:3]}")  # Show first 3 topics
                    except:
                        print(f"  Review {i+1}: Topics data available")
            
            # Display sample entities
            if 'entities' in reviews_df.columns:
                print(f"\nüè∑Ô∏è Sample Review Entities (first 3 reviews):")
                for i, entities_json in enumerate(reviews_df['entities'].dropna().head(3)):
                    try:
                        entities = json.loads(entities_json)
                        print(f"  Review {i+1}: {entities[:5]}")  # Show first 5 entities
                    except:
                        print(f"  Review {i+1}: Entities data available")
            
            # Display sample keywords
            if 'keywords' in reviews_df.columns:
                print(f"\nüîë Sample Review Keywords (first 3 reviews):")
                for i, keywords_json in enumerate(reviews_df['keywords'].dropna().head(3)):
                    try:
                        keywords = json.loads(keywords_json)
                        print(f"  Review {i+1}: {keywords[:10]}")  # Show first 10 keywords
                    except:
                        print(f"  Review {i+1}: Keywords data available")
        
        print("\n" + "=" * 60)
        print("‚úÖ ANALYSIS RESULTS QUERY COMPLETED")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
